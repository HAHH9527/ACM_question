反转串：
import java.util.Scanner;

public class Main {

    public static String digui(String str, String answer, int length) {
	if (length == 0) {
	    answer = answer + str.charAt(length);
	    return answer;
	}
	answer = answer + str.charAt(length);
	length--;
	return digui(str, answer, length);
    }

    public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	while (sc.hasNext()) {
	    String str = sc.next();
	    int length = str.length() - 1;
	    String answer = digui(str, "", length);
	    System.out.println(answer);
	}
    }
}
蟠桃记：
import java.util.Scanner;

public class Main {
    public static int digui(int sum, int day) {
	if (day == 1) {
	    return sum;
	}
	sum = (sum + 1) * 2;
	day--;
	return digui(sum, day);
    }

    public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	while (sc.hasNext()) {
	    int day = sc.nextInt();
	    int answer = digui(1, day);
	    System.out.println(answer);
	}
    }
}
求n个元素的全排列：

求两个串中最大的公共子序列的长度：
import java.util.Scanner;

public class Main {
    public static int digui(int count, int length, char[] ch, String str) {
	if (length == ch.length - 1) {
	    if (str.indexOf(ch[length]) >= 0) {
		count++;
		str = str.substring(str.indexOf(ch[length]), str.length());
	    }
	    return count;
	}
	if (str.indexOf(ch[length]) >= 0) {
	    count++;
	    str = str.substring(str.indexOf(ch[length]), str.length());
	}
	length++;
	return digui(count, length, ch, str);
    }

    public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	while (sc.hasNext()) {
	    String str1 = sc.next();
	    String str2 = sc.next();
	    if (str2.length() > str1.length()) {
		String temp = str1;
		str1 = str2;
		str2 = temp;
	    }
	    char[] ch = str2.toCharArray();
	    int answer = digui(0, 0, ch, str1);
	    System.out.println(answer);
	}
    }
}

整数的划分问题：

